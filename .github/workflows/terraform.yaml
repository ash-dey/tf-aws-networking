name: "Terraform"

on:
  push:
    branches:
      - dev
      - main
  pull_request:
    types: [opened, reopened]
    branches:
      - dev
      - main
  workflow_dispatch:

env:
  AWS_REGION: ap-southeast-2
  TF_CLOUD_ORGANIZATION: ash-dey

jobs:

  DeployDev:
    name: Deploy to dev
    if: ${{github.event.pull_request.base.ref == 'dev' && github.event_name == 'pull_request'}}

    runs-on: ubuntu-latest
    environment: dev
    env:
      DeployTo: dev
      TF_WORKSPACE: tf-aws-networking-dev-ap-southeast-2
    # Use the Bash shell regardless of GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        working-directory: ./
        shell: bash
    steps:
      - uses: actions/checkout@v3

      - name: Print event data
        env:
          EVENT: ${{ toJSON( github.event ) }}
        run: echo "$EVENT"

      - name: Verify the workspace context
        run: |
          echo 'pull request to branch ${{github.event.pull_request.base.ref}}'
          echo 'Name of the repo using github.event.repository.name ${{github.event.repository.name}}'

#      - name: Setup Terraform
#        uses: hashicorp/setup-terraform@v2
#        with:
#          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
#
#      - name: Terraform Format
#        id: fmt
#        run: terraform fmt -check
#
#      - name: Terraform Init
#        id: init
#        run: terraform init
#
#      - name: Terraform Validate
#        id: validate
#        run: terraform validate -no-color
#
#      - name: Terraform Plan
#        id: plan
#        run: terraform plan -no-color -input=false -var-file="./vars/$DeployTo.tfvars"
#        continue-on-error: true
#
#      - name: Terraform Plan Status
#        if: steps.plan.outcome == 'failure'
#        run: exit 1
#
#      - name: execute
#        run: terraform apply -auto-approve -input=false -var-file=./vars/$DeployTo.tfvars
#
  DeployUat:
    name: Deploy to uat
    if: ${{github.ref == 'refs/heads/dev' && github.event_name == 'push'}}
    runs-on: ubuntu-latest
    environment: uat
    env:
      DeployTo: uat
      TF_WORKSPACE: tf-aws-networking-uat-ap-southeast-2
    # Use the Bash shell regardless of GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        working-directory: ./
        shell: bash
    steps:
      - uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Terraform Format
        id: fmt
        run: terraform fmt -check

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color -input=false -var-file="./vars/$DeployTo.tfvars"
        continue-on-error: true

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: execute
        run: terraform apply -auto-approve -input=false -var-file=./vars/$DeployTo.tfvars


  DeployStaging:
    name: Deploy to staging
    if: ${{github.ref == 'refs/heads/main' && github.event_name == 'pull_request'}}
    runs-on: ubuntu-latest
    environment: staging
    env:
      DeployTo: staging
      TF_WORKSPACE: tf-aws-networking-staging-ap-southeast-2
    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        working-directory: ./
        shell: bash
    steps:
      - uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Terraform Format
        id: fmt
        run: terraform fmt -check

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color -input=false -var-file="./vars/$DeployTo.tfvars"
        continue-on-error: true

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: execute
        run: terraform apply -auto-approve -input=false -var-file=./vars/$DeployTo.tfvars


  DeployProd:
    name: Deploy to production
    if: ${{github.ref == 'refs/heads/main' && github.event_name == 'push'}}
    runs-on: ubuntu-latest
    environment: prod
    env:
      DeployTo: prod
      TF_WORKSPACE: tf-aws-networking-prod-ap-southeast-2
    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        working-directory: ./
        shell: bash
    steps:
      - uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Terraform Format
        id: fmt
        run: terraform fmt -check

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color -input=false -var-file="./vars/$DeployTo.tfvars"
        continue-on-error: true

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: execute
        run: terraform apply -auto-approve -input=false -var-file=./vars/$DeployTo.tfvars



#  terraform:
#    name: "Terraform"
#    runs-on: ubuntu-latest
#    steps:
#      - name: Checkout
#        uses: actions/checkout@v3
#
#      - name: Setup Terraform
#        uses: hashicorp/setup-terraform@v2
#        with:
#          # terraform_version: 0.13.0:
#          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
##
#      - name: Terraform Format
#        id: fmt
#        run: terraform fmt -check
#
#      - name: Terraform Init
#        id: init
#        run: terraform init
#
#      - name: Terraform Validate
#        id: validate
#        run: terraform validate -no-color
#
#      - name: Terraform Plan
#        id: plan
#        if: github.event_name == 'pull_request'
#        run: terraform plan -no-color -input=false
#        continue-on-error: true
#
#      - uses: actions/github-script@v6
#        if: github.event_name == 'pull_request'
#        env:
#          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
#        with:
#          github-token: ${{ secrets.GITHUB_TOKEN }}
#          script: |
#            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
#            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
#            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
#            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
#
#            <details><summary>Show Plan</summary>
#
#            \`\`\`\n
#            ${process.env.PLAN}
#            \`\`\`
#
#            </details>
#
#            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
#
#            github.rest.issues.createComment({
#              issue_number: context.issue.number,g
#              owner: context.repo.owner,
#              repo: context.repo.repo,
#              body: output
#            })
#
#      - name: Terraform Plan Status
#        if: steps.plan.outcome == 'failure'
#        run: exit 1
#
#      - name: Terraform Apply
#        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
#        run: terraform apply -auto-approve -input=false
#