name: "Terraform"

on:
  push:
    branches:
      - dev
      - main
  pull_request:
    branches:
      - dev
      - main
  workflow_dispatch:

jobs:

  Build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Compile
        run: echo Hello, world!

  DeployDev:
    name: Deploy to dev
    if: (github.event.ref == 'refs/heads/dev' && github.event_name == 'pull_request')
    needs: [Build]
    runs-on: ubuntu-latest
    environment:
      name: dev
    steps:
      - name: Deploy
        run: |
          echo I am deploying!
          echo do something else

  DeployUat:
    name: Deploy to uat
    if: (github.event.ref == 'refs/heads/dev' && github.event_name == 'push')
    needs: [Build]
    runs-on: ubuntu-latest
    environment:
      name: uat
    steps:
      - name: Deploy
        run: |
          echo I am deploying!
          echo do something else

  DeployStaging:
    name: Deploy to staging
    if: (github.event.ref == 'refs/heads/main' && github.event_name == 'pull_request')
    needs: [Build]
    runs-on: ubuntu-latest
    environment:
      name: staging
    steps:
      - name: Deploy
        run: |
          echo I am deploying!
          echo do something else

  DeployProd:
    name: Deploy to production
    if: (github.event.ref == 'refs/heads/main' && github.event_name == 'push')
    needs: [Build]
    runs-on: ubuntu-latest
    environment:
      name: prod
    steps:
      - name: Deploy
        run: |
          echo I am deploying!
          echo do something else


#  terraform:
#    name: "Terraform"
#    runs-on: ubuntu-latest
#    steps:
#      - name: Checkout
#        uses: actions/checkout@v3
#
#      - name: Setup Terraform
#        uses: hashicorp/setup-terraform@v2
#        with:
#          # terraform_version: 0.13.0:
#          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
#
#      - name: dev branch
#        if: "contains(${GITHUB_REF##*/}, 'dev')"
#        run: cd dev
#
#      - name: uat branch
#        if: "contains(${GITHUB_REF##*/}, 'uat')"
#        run: cd uat
#
#      - name: staging branch
#        if: "contains(${GITHUB_REF##*/}, 'staging')"
#        run: cd staging
#
#      - name: prod branch
#        if: "contains(${GITHUB_REF##*/}, 'prod')"
#        run: cd prod
#
#
#      - name: Terraform Format
#        id: fmt
#        run: terraform fmt -check
#
#      - name: Terraform Init
#        id: init
#        run: terraform init
#
#      - name: Terraform Validate
#        id: validate
#        run: terraform validate -no-color
#
#      - name: Terraform Plan
#        id: plan
#        if: github.event_name == 'pull_request'
#        run: terraform plan -no-color -input=false
#        continue-on-error: true
#
#      - uses: actions/github-script@v6
#        if: github.event_name == 'pull_request'
#        env:
#          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
#        with:
#          github-token: ${{ secrets.GITHUB_TOKEN }}
#          script: |
#            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
#            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
#            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
#            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
#
#            <details><summary>Show Plan</summary>
#
#            \`\`\`\n
#            ${process.env.PLAN}
#            \`\`\`
#
#            </details>
#
#            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
#
#            github.rest.issues.createComment({
#              issue_number: context.issue.number,g
#              owner: context.repo.owner,
#              repo: context.repo.repo,
#              body: output
#            })
#
#      - name: Terraform Plan Status
#        if: steps.plan.outcome == 'failure'
#        run: exit 1
#
#      - name: Terraform Apply
#        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
#        run: terraform apply -auto-approve -input=false
#